sudo apt update
sudo apt remove open-vm-tools --purge

sudo apt install vim samba

sudo vim /etc/gdm3/custom.conf

install chrome 

install rustdesk
pm2 start hbbr
pm2 start hbbs

install google-pinyin inputmethod
setup language chinese
sudo apt install fcitx
im-config
sudo apt install fcitx-googlepinyin
fcitx-config-gtk3
fcitx-configtool

sudo apt install git
sudo dpkg -i code_1.95.3-1731513102_amd64.deb

ssh-keygen -t rsa -C "someone@gmail.com"
git config --global user.name "someone"
git config --global user.email "someone@gmail.com"
git remote add origin git-url

type $command
which $command
apropos $command  ==  man -k $command
locate $command
stat $filename
cat file
tail -n 10 file
find / -name '*.c'
wc < myfile
bash -c 'exit -2'

myvar=something
echo $myvar

sed -e

unset myvar

for FN in *.JPG
do
    mv "$FN" "${FN,,}"
done

git init
git add readme.txt
git commit -m "wrote a readme file"

//\third_party\blink\renderer\modules\canvas\canvas2d\base_rendering_context_2d.cc
void BaseRenderingContext2D::fillText(const String& text, double x, double y) {
  DrawTextInternal(text, x, y, CanvasRenderingContext2DState::kFillPaintType);
}

void BaseRenderingContext2D::fillText(const String& text,
                                      double x,
                                      double y,
                                      double max_width) {
  DrawTextInternal(text, x, y, CanvasRenderingContext2DState::kFillPaintType,
                   &max_width);
}

int getRandomIntForFoo4Modern() {
    static std::mt19937 generator(static_cast<unsigned long>(time(NULL))); // 静态以确保只初始化一次
    std::uniform_int_distribution<int> distribution(0, 2);
    return distribution(generator);
}

void BaseRenderingContext2D::fillText(const String& text, double x, double y) {
  x = x + getRandomIntForFoo4Modern();
  y = y + getRandomIntForFoo4Modern();
  DrawTextInternal(text, x, y, CanvasRenderingContext2DState::kFillPaintType);
}

void BaseRenderingContext2D::fillText(const String& text,
                                      double x,
                                      double y,
                                      double max_width) {
  x = x + getRandomIntForFoo4Modern();
  y = y + getRandomIntForFoo4Modern();
  DrawTextInternal(text, x, y, CanvasRenderingContext2DState::kFillPaintType,
                   &max_width);
}

//third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
std::optional<Vector<String>>
WebGLRenderingContextBase::getSupportedExtensions() {
  if (isContextLost())
    return std::nullopt;

  Vector<String> result;

  for (ExtensionTracker* tracker : extensions_) {
    if (ExtensionSupportedAndAllowed(tracker)) {
      result.push_back(tracker->ExtensionName());
    }
  }

  return result;
}


std::optional<Vector<String>>
WebGLRenderingContextBase::getSupportedExtensions() {
  if (isContextLost())
    return std::nullopt;

  Vector<String> result;

  for (ExtensionTracker* tracker : extensions_) {
    if (ExtensionSupportedAndAllowed(tracker)) {
      result.push_back(tracker->ExtensionName());
    }
  }

  // 使用当前时间作为随机数生成的种子
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::default_random_engine engine(seed);

  // 打乱result中的元素顺序
  std::shuffle(result.begin(), result.end(), engine);
  
  return result;
}

//https://blog.csdn.net/w1101662433/article/details/137967139    third_party\blink\renderer\core\html\html_element.cc
int getRandomIntForFoo2Modern() {
    static std::mt19937 generator(static_cast<unsigned long>(time(NULL))); // 静态以确保只初始化一次
    std::uniform_int_distribution<int> distribution(0, 9);
    int tmp = distribution(generator);
	if (tmp > 0){
		return 0;
	}else{
		return 1;
	}
}

int HTMLElement::offsetWidthForBinding() {
  GetDocument().EnsurePaintLocationDataValidForNode(
      this, DocumentUpdateReason::kJavaScript);
  int result = 0;
  if (const auto* layout_object = GetLayoutBoxModelObject()) {
    result = AdjustedOffsetForZoom(layout_object->OffsetWidth());
    RecordScrollbarSizeForStudy(result, /* is_width= */ true,
                                /* is_offset= */ true);
  }
  result = result + getRandomIntForFoo2Modern();
  return result;
}

DISABLE_CFI_PERF
int HTMLElement::offsetHeightForBinding() {
  GetDocument().EnsurePaintLocationDataValidForNode(
      this, DocumentUpdateReason::kJavaScript);
  int result = 0;
  if (const auto* layout_object = GetLayoutBoxModelObject()) {
    result = AdjustedOffsetForZoom(layout_object->OffsetHeight());
    RecordScrollbarSizeForStudy(result, /* is_width= */ false,
                                /* is_offset= */ true);
  }
  result = result + getRandomIntForFoo2Modern();
  return result;
}


//https://blog.csdn.net/w1101662433/article/details/138001797  third_party/blink/renderer/modules/peerconnection/rtc_ice_candidate.cc

std::string generateRandomIP() {
    srand(static_cast<unsigned int>(time(0))); // 为了每次运行生成不同的随机数
    int ip_part = rand() % 256;
    std::string ip = "192.168.1.";
    ip += std::to_string(ip_part);
    return ip;
}

String RTCIceCandidate::candidate() const {
  //return platform_candidate_->Candidate();
  return String(generateRandomIP());
}
